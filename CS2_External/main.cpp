
#define _CRT_SECURE_NO_WARNINGS
#include "Cheats.h"
#include "Offsets.h"
#include "Resources/Language.h"
#include "Utils/Initial/Init.h"
#include "Utils/XorStr.h"
#include "Utils/ConfigSaver.hpp"
#include <chrono>
#include <filesystem>
#include <iomanip>
#include <KnownFolders.h>
#include <ShlObj.h>
#include <stdio.h>
#ifndef USERMODE
#include "Utils/kdm/kdmapper.hpp"
#endif
using namespace Lang;
//#include "Utils/curl/curl.h"
//#include "Utils/json/json.hpp"
using namespace std;
/*
Contributors:
	Shinyaluvs,
	Nx0Ri,
	ByteCorum,
	Skarbor,
	PedroGoncalves,
	KeysIsCool,
	Kenny,
	Cr1ppl3,
	Tairitsu,
	sh1pi,
	toepas,
	djsacred,
	tokinaa,
	faster_bbc,
	vsantos1,
	5mmod,
	gScream,
	Hazetick,
	styx,
	user1232,
	TaKaStuKi.sen
*/

namespace fs = filesystem;
bool otp = false;
string fileName;



void Exit()
{
	system("pause");
	exit(0);
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);

void RandomTitle()
{
	constexpr int length = 25;
	const auto characters = TEXT("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`-=~!@#$%^&*()_+,./;'[]|{}:?甲乙丙丁戊己庚辛壬癸子丑寅卯辰巳午未申酉戌亥");
	TCHAR title[length + 1]{};

	for (int j = 0; j != length; j++)
	{
		title[j] += characters[rand() % 95];
	}

	SetConsoleTitle(title);
}
#ifndef USERMODE

unsigned char Driver[] = { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00,
0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68,
0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20,
0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xCF, 0x16, 0xDD, 0xF5, 0x8B, 0x77, 0xB3, 0xA6, 0x8B, 0x77, 0xB3, 0xA6, 0x8B, 0x77, 0xB3, 0xA6,
0x8B, 0x77, 0xB3, 0xA6, 0x8A, 0x77, 0xB3, 0xA6, 0xC0, 0x0F, 0xB0, 0xA7, 0x8F, 0x77, 0xB3, 0xA6,
0xC0, 0x0F, 0xB7, 0xA7, 0x8A, 0x77, 0xB3, 0xA6, 0xC0, 0x0F, 0xB2, 0xA7, 0x88, 0x77, 0xB3, 0xA6,
0x8B, 0x77, 0xB2, 0xA6, 0x9F, 0x77, 0xB3, 0xA6, 0x64, 0xF5, 0xBA, 0xA7, 0x8A, 0x77, 0xB3, 0xA6,
0x64, 0xF5, 0xB1, 0xA7, 0x8A, 0x77, 0xB3, 0xA6, 0x52, 0x69, 0x63, 0x68, 0x8B, 0x77, 0xB3, 0xA6,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x04, 0x00,
0x8D, 0xB8, 0x6C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x22, 0x20,
0x0B, 0x02, 0x0E, 0x27, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x19, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
0xF9, 0x85, 0x00, 0x00, 0x01, 0x00, 0x60, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x25, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xDC, 0x21, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x20, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
0x16, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
0x00, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
0xCC, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4C, 0x8B, 0xDC, 0x49, 0x89, 0x53, 0x10, 0x53, 0x56, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83,
0xEC, 0x50, 0x45, 0x33, 0xFF, 0x48, 0x83, 0xE1, 0xF0, 0x48, 0x8B, 0xC2, 0x4D, 0x89, 0x7B, 0x08,
0x48, 0xC1, 0xE8, 0x27, 0x48, 0x8B, 0xF2, 0x25, 0xFF, 0x01, 0x00, 0x00, 0x48, 0xC1, 0xEE, 0x0C,
0x48, 0x8B, 0xFA, 0x4D, 0x89, 0x7B, 0x18, 0x48, 0xC1, 0xEF, 0x15, 0x48, 0x8B, 0xDA, 0x48, 0xC1,
0xEB, 0x1E, 0x4C, 0x8B, 0xF2, 0x4C, 0x8D, 0x14, 0xC1, 0x41, 0x81, 0xE6, 0xFF, 0x0F, 0x00, 0x00,
0x81, 0xE6, 0xFF, 0x01, 0x00, 0x00, 0x81, 0xE7, 0xFF, 0x01, 0x00, 0x00, 0x81, 0xE3, 0xFF, 0x01,
0x00, 0x00, 0x45, 0x8B, 0xCF, 0x4D, 0x85, 0xD2, 0x74, 0x2D, 0x49, 0x8D, 0x43, 0x08, 0x49, 0x8B,
0xD2, 0x45, 0x8D, 0x4F, 0x01, 0x49, 0x89, 0x43, 0xA8, 0x45, 0x8D, 0x47, 0x08, 0x49, 0x8D, 0x4B,
0x18, 0xFF, 0x15, 0xC1, 0x0F, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00, 0x4C,
0x8B, 0x8C, 0x24, 0x90, 0x00, 0x00, 0x00, 0x41, 0x0F, 0xB6, 0xC1, 0x48, 0x89, 0x6C, 0x24, 0x48,
0xF6, 0xD0, 0xA8, 0x01, 0x0F, 0x85, 0x69, 0x01, 0x00, 0x00, 0x48, 0xBD, 0x00, 0xF0, 0xFF, 0xFF,
0x0F, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xBC, 0x24, 0x98, 0x00, 0x00, 0x00, 0x4C, 0x23, 0xCD, 0x4D,
0x8B, 0xC7, 0x49, 0x8D, 0x04, 0xD9, 0x48, 0x85, 0xC0, 0x74, 0x38, 0x41, 0xB9, 0x01, 0x00, 0x00,
0x00, 0x48, 0x8D, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4C, 0x24, 0x20, 0x48, 0x8B,
0xD0, 0x48, 0x8D, 0x8C, 0x24, 0x98, 0x00, 0x00, 0x00, 0x45, 0x8D, 0x41, 0x07, 0xFF, 0x15, 0x55,
0x0F, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x84, 0x24, 0x98,
0x00, 0x00, 0x00, 0x41, 0x0F, 0xB6, 0xC8, 0xF6, 0xD1, 0xF6, 0xC1, 0x01, 0x0F, 0x85, 0x01, 0x01,
0x00, 0x00, 0x45, 0x84, 0xC0, 0x79, 0x27, 0x48, 0xB8, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x0F,
0x00, 0x81, 0xE2, 0xFF, 0xFF, 0xFF, 0x3F, 0x49, 0x23, 0xC0, 0x48, 0x03, 0xC2, 0x48, 0x8B, 0x6C,
0x24, 0x48, 0x48, 0x83, 0xC4, 0x50, 0x41, 0x5F, 0x41, 0x5E, 0x5F, 0x5E, 0x5B, 0xC3, 0x4C, 0x23,
0xC5, 0x49, 0x8B, 0xC7, 0x48, 0x89, 0x44, 0x24, 0x30, 0x49, 0x8D, 0x0C, 0xF8, 0x48, 0x85, 0xC9,
0x74, 0x32, 0x41, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,
0x48, 0x8B, 0xD1, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x30, 0x45, 0x8D, 0x41,
0x07, 0xFF, 0x15, 0xD1, 0x0E, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00, 0x48,
0x8B, 0x44, 0x24, 0x30, 0x0F, 0xB6, 0xC8, 0xF6, 0xD1, 0xF6, 0xC1, 0x01, 0x0F, 0x85, 0x81, 0x00,
0x00, 0x00, 0x84, 0xC0, 0x79, 0x1D, 0x48, 0x23, 0xC5, 0x81, 0xE2, 0xFF, 0xFF, 0x1F, 0x00, 0x48,
0x03, 0xC2, 0x48, 0x8B, 0x6C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x50, 0x41, 0x5F, 0x41, 0x5E, 0x5F,
0x5E, 0x5B, 0xC3, 0x48, 0x23, 0xC5, 0x49, 0x8B, 0xCF, 0x48, 0x89, 0x8C, 0x24, 0x88, 0x00, 0x00,
0x00, 0x48, 0x8D, 0x14, 0xF0, 0x48, 0x85, 0xD2, 0x74, 0x2D, 0x41, 0xB9, 0x01, 0x00, 0x00, 0x00,
0x48, 0x8D, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0x88, 0x00, 0x00, 0x00,
0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x8D, 0x41, 0x07, 0xFF, 0x15, 0x59, 0x0E, 0x00, 0x00, 0x48,
0x8B, 0x8C, 0x24, 0x88, 0x00, 0x00, 0x00, 0x48, 0x23, 0xCD, 0x49, 0x8D, 0x04, 0x0E, 0x49, 0x0F,
0x44, 0xC7, 0x48, 0x8B, 0x6C, 0x24, 0x48, 0x48, 0x83, 0xC4, 0x50, 0x41, 0x5F, 0x41, 0x5E, 0x5F,
0x5E, 0x5B, 0xC3, 0x48, 0x8B, 0x6C, 0x24, 0x48, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x50, 0x41, 0x5F,
0x41, 0x5E, 0x5F, 0x5E, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x48, 0x89, 0x5C, 0x24, 0x10, 0x48, 0x89, 0x6C, 0x24, 0x18, 0x56, 0x48, 0x83, 0xEC, 0x60, 0x48,
0x8B, 0xEA, 0x48, 0x8B, 0xD9, 0xFF, 0x15, 0xBD, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0xF0, 0x48, 0x85,
0xC0, 0x75, 0x13, 0x48, 0x8B, 0x5C, 0x24, 0x78, 0x48, 0x8B, 0xAC, 0x24, 0x80, 0x00, 0x00, 0x00,
0x48, 0x83, 0xC4, 0x60, 0x5E, 0xC3, 0x48, 0x8D, 0x54, 0x24, 0x30, 0x48, 0x89, 0x7C, 0x24, 0x70,
0x48, 0x8B, 0xCB, 0xFF, 0x15, 0xBF, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x85, 0xF6,
0x74, 0x73, 0x48, 0x8B, 0x5E, 0x10, 0x48, 0x83, 0xC6, 0x10, 0x48, 0x3B, 0xDE, 0x74, 0x66, 0x90,
0x0F, 0x10, 0x43, 0x58, 0x4C, 0x8D, 0x4C, 0x24, 0x20, 0x33, 0xD2, 0x4C, 0x8D, 0x05, 0xE6, 0x0D,
0x00, 0x00, 0x33, 0xC9, 0x0F, 0x29, 0x44, 0x24, 0x20, 0xFF, 0x15, 0x61, 0x0D, 0x00, 0x00, 0x4C,
0x8B, 0x4B, 0x30, 0x4C, 0x8D, 0x05, 0xE6, 0x0D, 0x00, 0x00, 0x33, 0xD2, 0x33, 0xC9, 0xFF, 0x15,
0x4C, 0x0D, 0x00, 0x00, 0x44, 0x8B, 0x4B, 0x40, 0x4C, 0x8D, 0x05, 0xE9, 0x0D, 0x00, 0x00, 0x33,
0xD2, 0x33, 0xC9, 0xFF, 0x15, 0x37, 0x0D, 0x00, 0x00, 0x41, 0xB0, 0x01, 0x48, 0x8D, 0x4B, 0x58,
0x48, 0x8B, 0xD5, 0xFF, 0x15, 0x17, 0x0D, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x2D, 0x48, 0x8B, 0x1B,
0x48, 0x3B, 0xDE, 0x75, 0x9B, 0x48, 0x8D, 0x4C, 0x24, 0x30, 0xFF, 0x15, 0x78, 0x0D, 0x00, 0x00,
0x33, 0xC0, 0x48, 0x8B, 0x7C, 0x24, 0x70, 0x48, 0x8B, 0x5C, 0x24, 0x78, 0x48, 0x8B, 0xAC, 0x24,
0x80, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x60, 0x5E, 0xC3, 0x48, 0x8B, 0x5B, 0x30, 0x48, 0x8D,
0x4C, 0x24, 0x30, 0xFF, 0x15, 0x4F, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0xC3, 0xEB, 0xD4, 0xCC, 0xCC,
0x40, 0x53, 0x56, 0x48, 0x81, 0xEC, 0x58, 0x01, 0x00, 0x00, 0x8B, 0x01, 0x33, 0xF6, 0x48, 0x89,
0xB4, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xD9, 0x85, 0xC0, 0x75, 0x0C, 0xB0, 0x01, 0x48,
0x81, 0xC4, 0x58, 0x01, 0x00, 0x00, 0x5E, 0x5B, 0xC3, 0x48, 0x89, 0xAC, 0x24, 0x78, 0x01, 0x00,
0x00, 0x48, 0x8D, 0x94, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x89, 0xBC, 0x24, 0x80, 0x01, 0x00,
0x00, 0x48, 0x8B, 0xC8, 0x4C, 0x89, 0xA4, 0x24, 0x50, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xB4, 0x24,
0x48, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xBC, 0x24, 0x40, 0x01, 0x00, 0x00, 0xFF, 0x15, 0xAE, 0x0C,
0x00, 0x00, 0x85, 0xC0, 0x0F, 0x85, 0x19, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x7B, 0x18, 0x4C, 0x8B,
0x63, 0x10, 0x4C, 0x8B, 0x7B, 0x08, 0x48, 0x8B, 0x9C, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x85,
0xDB, 0x75, 0x05, 0x48, 0x8B, 0xEE, 0xEB, 0x6C, 0x48, 0x8B, 0x6B, 0x28, 0x48, 0x85, 0xED, 0x75,
0x63, 0x33, 0xD2, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0x41, 0xB8, 0x14, 0x01, 0x00, 0x00, 0xE8, 0x2D,
0x09, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x15, 0x72, 0x0C, 0x00, 0x00, 0x8B, 0x44,
0x24, 0x2C, 0x3D, 0x61, 0x4A, 0x00, 0x00, 0x77, 0x2A, 0x74, 0x28, 0x2D, 0xEE, 0x42, 0x00, 0x00,
0x74, 0x1A, 0x2D, 0x75, 0x02, 0x00, 0x00, 0x74, 0x13, 0x2D, 0x57, 0x02, 0x00, 0x00, 0x74, 0x05,
0x83, 0xF8, 0x01, 0x75, 0x0E, 0xB8, 0x80, 0x02, 0x00, 0x00, 0xEB, 0x0C, 0xB8, 0x78, 0x02, 0x00,
0x00, 0xEB, 0x05, 0xB8, 0x88, 0x03, 0x00, 0x00, 0x48, 0x8B, 0x2C, 0x18, 0x48, 0x8B, 0x9C, 0x24,
0x70, 0x01, 0x00, 0x00, 0x48, 0x85, 0xFF, 0x0F, 0x84, 0x79, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x00,
0x4A, 0x8D, 0x14, 0x3E, 0x48, 0x8B, 0xCD, 0xE8, 0xC4, 0xFB, 0xFF, 0xFF, 0x48, 0x85, 0xC0, 0x74,
0x72, 0x48, 0x8B, 0xC8, 0xBB, 0x00, 0x10, 0x00, 0x00, 0x81, 0xE1, 0xFF, 0x0F, 0x00, 0x00, 0x41,
0xB8, 0x04, 0x00, 0x00, 0x00, 0x48, 0x2B, 0xD9, 0x48, 0x8B, 0xC8, 0x48, 0x3B, 0xDF, 0x48, 0x0F,
0x43, 0xDF, 0x48, 0x8B, 0xD3, 0xFF, 0x15, 0xED, 0x0B, 0x00, 0x00, 0x4C, 0x8B, 0xF0, 0x48, 0x85,
0xC0, 0x74, 0x2B, 0x4A, 0x8D, 0x14, 0x26, 0x4C, 0x8B, 0xC3, 0x48, 0x8B, 0xC8, 0xE8, 0xBE, 0x05,
0x00, 0x00, 0x48, 0x8B, 0xD3, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x9A, 0x0B, 0x00, 0x00, 0x48, 0x2B,
0xFB, 0x48, 0x03, 0xF3, 0x48, 0x85, 0xDB, 0x74, 0x05, 0x48, 0x85, 0xFF, 0x75, 0x92, 0x48, 0x8B,
0x9C, 0x24, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0x69, 0x0B, 0x00, 0x00, 0xB0,
0x01, 0xEB, 0x02, 0x32, 0xC0, 0x4C, 0x8B, 0xB4, 0x24, 0x48, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xA4,
0x24, 0x50, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xBC, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xAC,
0x24, 0x78, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xBC, 0x24, 0x40, 0x01, 0x00, 0x00, 0x48, 0x81, 0xC4,
0x58, 0x01, 0x00, 0x00, 0x5E, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x40, 0x55, 0x53, 0x57, 0x48, 0x8D, 0x6C, 0x24, 0x80, 0x48, 0x81, 0xEC, 0x80, 0x01, 0x00, 0x00,
0x8B, 0x41, 0x20, 0x48, 0x8B, 0xF9, 0x3D, 0x01, 0x00, 0x00, 0x80, 0x0F, 0x84, 0x18, 0x01, 0x00,
0x00, 0x3D, 0x02, 0x00, 0x00, 0x80, 0x0F, 0x84, 0xA5, 0x00, 0x00, 0x00, 0x3D, 0x03, 0x00, 0x00,
0x80, 0x0F, 0x84, 0x8B, 0x00, 0x00, 0x00, 0x3D, 0x04, 0x00, 0x00, 0x80, 0x74, 0x59, 0x3D, 0x05,
0x00, 0x00, 0x80, 0x0F, 0x85, 0xFF, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x33, 0xDB, 0x48, 0x89, 0x9D,
0xA0, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x84, 0xC8, 0x00, 0x00, 0x00, 0x8B, 0xC8, 0x48, 0x8D,
0x95, 0xA0, 0x00, 0x00, 0x00, 0xFF, 0x15, 0xE5, 0x0A, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x85, 0xB1,
0x00, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x96, 0x0B, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x30, 0xFF,
0x15, 0xAB, 0x0A, 0x00, 0x00, 0x0F, 0x28, 0x44, 0x24, 0x30, 0x48, 0x8D, 0x54, 0x24, 0x40, 0x66,
0x0F, 0x7F, 0x44, 0x24, 0x40, 0xEB, 0x7E, 0x8B, 0x01, 0x33, 0xDB, 0x48, 0x89, 0x9D, 0xA0, 0x00,
0x00, 0x00, 0x85, 0xC0, 0x74, 0x7E, 0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0, 0x00, 0x00, 0x00, 0xFF,
0x15, 0x9B, 0x0A, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x6B, 0x48, 0x8D, 0x15, 0x38, 0x0B, 0x00, 0x00,
0xEB, 0x38, 0x48, 0x81, 0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xE9, 0x6F, 0xFD, 0xFF,
0xFF, 0x8B, 0x01, 0x33, 0xDB, 0x48, 0x89, 0x9D, 0xA0, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x44,
0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x61, 0x0A, 0x00, 0x00, 0x85,
0xC0, 0x75, 0x31, 0x48, 0x8D, 0x15, 0xE6, 0x0A, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xFF,
0x15, 0x2B, 0x0A, 0x00, 0x00, 0x0F, 0x28, 0x44, 0x24, 0x40, 0x48, 0x8D, 0x54, 0x24, 0x30, 0x66,
0x0F, 0x7F, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8D, 0xA0, 0x00, 0x00, 0x00, 0xE8, 0x1F, 0xFC, 0xFF,
0xFF, 0x48, 0x8B, 0xD8, 0x48, 0x85, 0xDB, 0x48, 0x89, 0x5F, 0x28, 0x0F, 0x95, 0xC0, 0x48, 0x81,
0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xC3, 0x8B, 0x01, 0x33, 0xDB, 0x48, 0x89, 0x9D,
0xA0, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x0D, 0xB0, 0x01, 0x48, 0x81, 0xC4, 0x80, 0x01, 0x00,
0x00, 0x5F, 0x5B, 0x5D, 0xC3, 0x48, 0x8B, 0xC8, 0x48, 0x8D, 0x95, 0xA0, 0x00, 0x00, 0x00, 0xFF,
0x15, 0xEB, 0x09, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x0D, 0x32, 0xC0, 0x48, 0x81, 0xC4, 0x80, 0x01,
0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xC3, 0x48, 0x89, 0xB4, 0x24, 0xB0, 0x01, 0x00, 0x00, 0x48, 0x8B,
0x77, 0x18, 0x4C, 0x89, 0xA4, 0x24, 0xB8, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0x67, 0x10, 0x4C, 0x89,
0xB4, 0x24, 0x78, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xBC, 0x24, 0x70, 0x01, 0x00, 0x00, 0x4C, 0x8B,
0x7F, 0x08, 0x48, 0x39, 0x9D, 0xA0, 0x00, 0x00, 0x00, 0x75, 0x05, 0x48, 0x8B, 0xFB, 0xEB, 0x6B,
0x4C, 0x8B, 0xB5, 0xA0, 0x00, 0x00, 0x00, 0x49, 0x8B, 0x7E, 0x28, 0x48, 0x85, 0xFF, 0x75, 0x5B,
0x33, 0xD2, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0x41, 0xB8, 0x14, 0x01, 0x00, 0x00, 0xE8, 0x3E, 0x06,
0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF, 0x15, 0x83, 0x09, 0x00, 0x00, 0x8B, 0x44, 0x24,
0x5C, 0x3D, 0x61, 0x4A, 0x00, 0x00, 0x77, 0x2A, 0x74, 0x28, 0x2D, 0xEE, 0x42, 0x00, 0x00, 0x74,
0x1A, 0x2D, 0x75, 0x02, 0x00, 0x00, 0x74, 0x13, 0x2D, 0x57, 0x02, 0x00, 0x00, 0x74, 0x05, 0x83,
0xF8, 0x01, 0x75, 0x0E, 0xB8, 0x80, 0x02, 0x00, 0x00, 0xEB, 0x0C, 0xB8, 0x78, 0x02, 0x00, 0x00,
0xEB, 0x05, 0xB8, 0x88, 0x03, 0x00, 0x00, 0x4A, 0x8B, 0x3C, 0x30, 0x4C, 0x8B, 0xF3, 0x48, 0x85,
0xF6, 0x74, 0x6F, 0x4B, 0x8D, 0x14, 0x3E, 0x48, 0x8B, 0xCF, 0xE8, 0xE1, 0xF8, 0xFF, 0xFF, 0x48,
0x85, 0xC0, 0x0F, 0x84, 0x94, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xC8, 0x48, 0x89, 0x9D, 0xA8, 0x00,
0x00, 0x00, 0x81, 0xE1, 0xFF, 0x0F, 0x00, 0x00, 0x48, 0x8D, 0x95, 0xA8, 0x00, 0x00, 0x00, 0x48,
0x89, 0x54, 0x24, 0x20, 0x41, 0xB8, 0x00, 0x10, 0x00, 0x00, 0x4C, 0x2B, 0xC1, 0x41, 0xB9, 0x01,
0x00, 0x00, 0x00, 0x4C, 0x3B, 0xC6, 0x4B, 0x8D, 0x0C, 0x26, 0x48, 0x8B, 0xD0, 0x4C, 0x0F, 0x43,
0xC6, 0xFF, 0x15, 0xE1, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x8D, 0xA8, 0x00, 0x00, 0x00, 0x48, 0x2B,
0xF1, 0x4C, 0x03, 0xF1, 0x85, 0xC0, 0x75, 0x0A, 0x48, 0x85, 0xC9, 0x74, 0x05, 0x48, 0x85, 0xF6,
0x75, 0x91, 0x48, 0x8B, 0x8D, 0xA0, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x89, 0x08, 0x00, 0x00, 0xB0,
0x01, 0x4C, 0x8B, 0xB4, 0x24, 0x78, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xA4, 0x24, 0xB8, 0x01, 0x00,
0x00, 0x48, 0x8B, 0xB4, 0x24, 0xB0, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0xBC, 0x24, 0x70, 0x01, 0x00,
0x00, 0x48, 0x81, 0xC4, 0x80, 0x01, 0x00, 0x00, 0x5F, 0x5B, 0x5D, 0xC3, 0xEB, 0xD3, 0xCC, 0xCC,
0x48, 0x83, 0xEC, 0x28, 0x33, 0xC9, 0x48, 0x8B, 0xC2, 0x89, 0x4A, 0x30, 0x48, 0x89, 0x4A, 0x38,
0x33, 0xD2, 0x48, 0x8B, 0xC8, 0xFF, 0x15, 0x8D, 0x08, 0x00, 0x00, 0x33, 0xC0, 0x48, 0x83, 0xC4,
0x28, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x82, 0xB8, 0x00, 0x00,
0x00, 0x33, 0xFF, 0x89, 0x7A, 0x30, 0x48, 0x8B, 0xDA, 0x48, 0x89, 0x7A, 0x38, 0x83, 0x78, 0x10,
0x30, 0x72, 0x27, 0x81, 0x78, 0x18, 0xD4, 0x1D, 0x22, 0x00, 0x75, 0x17, 0x48, 0x8B, 0x4A, 0x18,
0xE8, 0xCB, 0xFC, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0x0A, 0x48, 0xC7, 0x43, 0x38, 0x30, 0x00, 0x00,
0x00, 0xEB, 0x0C, 0xBF, 0x10, 0x00, 0x00, 0xC0, 0xEB, 0x05, 0xBF, 0x23, 0x00, 0x00, 0xC0, 0x33,
0xD2, 0x89, 0x7B, 0x30, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0x1B, 0x08, 0x00, 0x00, 0x8B, 0x43, 0x30,
0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x40, 0x53, 0x48, 0x83, 0xEC, 0x60, 0x48, 0x8B, 0xD9, 0x48, 0x8D, 0x15, 0xB0, 0x08, 0x00, 0x00,
0x48, 0x8D, 0x4C, 0x24, 0x40, 0xFF, 0x15, 0xA5, 0x07, 0x00, 0x00, 0x48, 0x8D, 0x84, 0x24, 0x80,
0x00, 0x00, 0x00, 0x41, 0xB9, 0x22, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4C, 0x8D,
0x44, 0x24, 0x40, 0xC6, 0x44, 0x24, 0x28, 0x00, 0x33, 0xD2, 0x48, 0x8B, 0xCB, 0xC7, 0x44, 0x24,
0x20, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x15, 0xB5, 0x07, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x7C, 0x48,
0x8D, 0x15, 0x9A, 0x08, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF, 0x15, 0x5F, 0x07, 0x00,
0x00, 0x48, 0x8D, 0x54, 0x24, 0x40, 0x48, 0x8D, 0x4C, 0x24, 0x50, 0xFF, 0x15, 0x9F, 0x07, 0x00,
0x00, 0x85, 0xC0, 0x75, 0x56, 0x48, 0x8B, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x05,
0xA4, 0x08, 0x00, 0x00, 0x33, 0xD2, 0x33, 0xC9, 0x83, 0x48, 0x30, 0x04, 0x48, 0x8D, 0x05, 0xCD,
0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x43, 0x70, 0x48, 0x89, 0x83, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8D,
0x05, 0xEB, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x83, 0xE0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24,
0x80, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x43, 0x68, 0x00, 0x00, 0x00, 0x00, 0x81, 0x60, 0x30, 0x7F,
0xFF, 0xFF, 0xFF, 0xFF, 0x15, 0xE7, 0x06, 0x00, 0x00, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x60, 0x5B,
0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x48, 0x83, 0xEC, 0x38, 0x48, 0x8D, 0x15, 0x65, 0x08, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20,
0xFF, 0x15, 0xCA, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x03, 0xFF, 0xFF, 0xFF, 0x48, 0x8D, 0x4C,
0x24, 0x20, 0xFF, 0x15, 0xC8, 0x06, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x38, 0xC3, 0xCC, 0xCC, 0xCC,
0x40, 0x53, 0x48, 0x83, 0xEC, 0x10, 0x33, 0xC0, 0x33, 0xC9, 0x0F, 0xA2, 0x44, 0x8B, 0xC0, 0x33,
0xC9, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x45, 0x32, 0xC9, 0x0F, 0xA2, 0x89, 0x04, 0x24, 0x44, 0x8B,
0xD1, 0xB8, 0x07, 0x00, 0x00, 0x00, 0x89, 0x5C, 0x24, 0x04, 0x89, 0x4C, 0x24, 0x08, 0x89, 0x54,
0x24, 0x0C, 0x44, 0x3B, 0xC0, 0x7C, 0x24, 0x33, 0xC9, 0x45, 0x0F, 0xB6, 0xC9, 0x0F, 0xA2, 0x89,
0x04, 0x24, 0x0F, 0xBA, 0xE3, 0x09, 0xB8, 0x02, 0x00, 0x00, 0x00, 0x89, 0x5C, 0x24, 0x04, 0x44,
0x0F, 0x42, 0xC8, 0x89, 0x4C, 0x24, 0x08, 0x89, 0x54, 0x24, 0x0C, 0x41, 0x0F, 0xBA, 0xE2, 0x14,
0x73, 0x26, 0x41, 0x0F, 0xBA, 0xE2, 0x1B, 0x73, 0x1F, 0x41, 0x0F, 0xBA, 0xE2, 0x1C, 0x73, 0x18,
0x33, 0xC9, 0x0F, 0x01, 0xD0, 0x48, 0xC1, 0xE2, 0x20, 0x48, 0x0B, 0xD0, 0x80, 0xE2, 0x06, 0x80,
0xFA, 0x06, 0x75, 0x04, 0x41, 0x80, 0xC9, 0x04, 0x41, 0x80, 0xC9, 0x01, 0x44, 0x88, 0x0D, 0xFD,
0x15, 0x00, 0x00, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x10, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x48, 0x8B, 0xC1, 0x49, 0x83, 0xF8, 0x08, 0x72, 0x37, 0x49, 0x83, 0xF8, 0x10, 0x77, 0x11, 0x4C,
0x8B, 0x1A, 0x4A, 0x8B, 0x54, 0x02, 0xF8, 0x4C, 0x89, 0x19, 0x4A, 0x89, 0x54, 0x01, 0xF8, 0xC3,
0x49, 0x83, 0xF8, 0x20, 0x77, 0x5A, 0x0F, 0x10, 0x02, 0x42, 0x0F, 0x10, 0x4C, 0x02, 0xF0, 0x0F,
0x11, 0x01, 0x42, 0x0F, 0x11, 0x4C, 0x01, 0xF0, 0xC3, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,
0x4D, 0x85, 0xC0, 0x74, 0x15, 0x48, 0x2B, 0xD1, 0x72, 0x16, 0x44, 0x8A, 0x1C, 0x11, 0x48, 0xFF,
0xC1, 0x49, 0xFF, 0xC8, 0x44, 0x88, 0x59, 0xFF, 0x75, 0xF0, 0xC3, 0x0F, 0x1F, 0x44, 0x00, 0x00,
0x49, 0x03, 0xC8, 0x44, 0x8A, 0x5C, 0x11, 0xFF, 0x48, 0xFF, 0xC9, 0x49, 0xFF, 0xC8, 0x44, 0x88,
0x19, 0x75, 0xF0, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4E, 0x8D, 0x1C, 0x02, 0x48, 0x2B, 0xD1, 0x73, 0x09, 0x4C, 0x3B, 0xD9, 0x0F, 0x87, 0x6E, 0x01,
0x00, 0x00, 0x0F, 0x10, 0x04, 0x11, 0x48, 0x83, 0xC1, 0x10, 0xF6, 0xC1, 0x0F, 0x74, 0x12, 0x48,
0x83, 0xE1, 0xF0, 0x0F, 0x10, 0x0C, 0x11, 0x0F, 0x11, 0x00, 0x0F, 0x28, 0xC1, 0x48, 0x83, 0xC1,
0x10, 0x4C, 0x03, 0xC0, 0x4C, 0x2B, 0xC1, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x06, 0x74, 0x6F,
0x49, 0x81, 0xF9, 0x00, 0x10, 0x00, 0x00, 0x0F, 0x87, 0xB3, 0x00, 0x00, 0x00, 0x49, 0x83, 0xE0,
0x3F, 0xEB, 0x2D, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00,
0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00,
0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0x10, 0x0C, 0x11, 0x0F, 0x10, 0x54, 0x11, 0x10, 0x0F, 0x10, 0x5C, 0x11, 0x20, 0x0F, 0x10,
0x64, 0x11, 0x30, 0x0F, 0x29, 0x41, 0xF0, 0x48, 0x83, 0xC1, 0x40, 0x49, 0xFF, 0xC9, 0x0F, 0x29,
0x49, 0xC0, 0x0F, 0x29, 0x51, 0xD0, 0x0F, 0x29, 0x59, 0xE0, 0x0F, 0x28, 0xC4, 0x75, 0xD1, 0x4D,
0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x04, 0x74, 0x19, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0x29, 0x41, 0xF0, 0x0F, 0x10, 0x04, 0x11, 0x48, 0x83, 0xC1, 0x10, 0x49, 0xFF, 0xC9, 0x75,
0xEF, 0x49, 0x83, 0xE0, 0x0F, 0x74, 0x0E, 0x4E, 0x8D, 0x5C, 0x01, 0xF0, 0x41, 0x0F, 0x10, 0x0C,
0x13, 0x41, 0x0F, 0x11, 0x0B, 0x0F, 0x29, 0x41, 0xF0, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,
0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x06, 0x49, 0x83, 0xE0, 0x3F, 0x0F, 0x18, 0x44, 0x11, 0x40,
0xEB, 0x2E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00,
0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90,
0x0F, 0x10, 0x0C, 0x11, 0x0F, 0x10, 0x54, 0x11, 0x10, 0x0F, 0x10, 0x5C, 0x11, 0x20, 0x0F, 0x10,
0x64, 0x11, 0x30, 0x0F, 0x2B, 0x41, 0xF0, 0x48, 0x83, 0xC1, 0x40, 0x0F, 0x18, 0x44, 0x11, 0x40,
0x49, 0xFF, 0xC9, 0x0F, 0x2B, 0x49, 0xC0, 0x0F, 0x2B, 0x51, 0xD0, 0x0F, 0x2B, 0x59, 0xE0, 0x0F,
0x28, 0xC4, 0x75, 0xCC, 0x0F, 0xAE, 0xF8, 0xE9, 0x33, 0xFF, 0xFF, 0xFF, 0x0F, 0x1F, 0x40, 0x00,
0x49, 0x03, 0xC8, 0x0F, 0x10, 0x44, 0x11, 0xF0, 0x48, 0x83, 0xE9, 0x10, 0x49, 0x83, 0xE8, 0x10,
0xF6, 0xC1, 0x0F, 0x74, 0x18, 0x4C, 0x8B, 0xD9, 0x48, 0x83, 0xE1, 0xF0, 0x0F, 0x10, 0x0C, 0x11,
0x41, 0x0F, 0x11, 0x03, 0x0F, 0x28, 0xC1, 0x4C, 0x8B, 0xC1, 0x4C, 0x2B, 0xC0, 0x4D, 0x8B, 0xC8,
0x49, 0xC1, 0xE9, 0x06, 0x74, 0x39, 0x49, 0x83, 0xE0, 0x3F, 0xEB, 0x04, 0x0F, 0x1F, 0x40, 0x00,
0x0F, 0x10, 0x4C, 0x11, 0xF0, 0x0F, 0x10, 0x54, 0x11, 0xE0, 0x0F, 0x10, 0x5C, 0x11, 0xD0, 0x0F,
0x10, 0x64, 0x11, 0xC0, 0x0F, 0x29, 0x01, 0x48, 0x83, 0xE9, 0x40, 0x49, 0xFF, 0xC9, 0x0F, 0x29,
0x49, 0x30, 0x0F, 0x29, 0x51, 0x20, 0x0F, 0x29, 0x59, 0x10, 0x0F, 0x28, 0xC4, 0x75, 0xD1, 0x4D,
0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x04, 0x74, 0x19, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0x29, 0x01, 0x0F, 0x10, 0x44, 0x11, 0xF0, 0x48, 0x83, 0xE9, 0x10, 0x49, 0xFF, 0xC9, 0x75,
0xEF, 0x49, 0x83, 0xE0, 0x0F, 0x74, 0x0F, 0x4C, 0x8B, 0xD9, 0x4D, 0x2B, 0xD8, 0x41, 0x0F, 0x10,
0x0C, 0x13, 0x41, 0x0F, 0x11, 0x0B, 0x0F, 0x29, 0x01, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x48, 0x8B, 0xC1, 0x0F, 0xB6, 0xD2, 0x49, 0xB9, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x49, 0x0F, 0xAF, 0xD1, 0x66, 0x48, 0x0F, 0x6E, 0xC2, 0x0F, 0x16, 0xC0, 0x49, 0x83, 0xF8, 0x40,
0x72, 0x6E, 0xF6, 0x05, 0xD7, 0x12, 0x00, 0x00, 0x02, 0x74, 0x0D, 0x49, 0x81, 0xF8, 0x20, 0x03,
0x00, 0x00, 0x0F, 0x83, 0x08, 0x01, 0x00, 0x00, 0x0F, 0x11, 0x01, 0x4C, 0x03, 0xC1, 0x48, 0x83,
0xC1, 0x10, 0x48, 0x83, 0xE1, 0xF0, 0x4C, 0x2B, 0xC1, 0x49, 0x83, 0xF8, 0x40, 0x72, 0x47, 0x4A,
0x8D, 0x54, 0x01, 0xF0, 0x4E, 0x8D, 0x4C, 0x01, 0xD0, 0x49, 0x83, 0xE1, 0xF0, 0x49, 0xC1, 0xE8,
0x06, 0x0F, 0x29, 0x01, 0x0F, 0x29, 0x41, 0x10, 0x48, 0x83, 0xC1, 0x40, 0x49, 0xFF, 0xC8, 0x0F,
0x29, 0x41, 0xE0, 0x0F, 0x29, 0x41, 0xF0, 0x75, 0xE8, 0x41, 0x0F, 0x29, 0x01, 0x41, 0x0F, 0x29,
0x41, 0x10, 0x41, 0x0F, 0x29, 0x41, 0x20, 0x0F, 0x11, 0x02, 0xC3, 0x0F, 0x1F, 0x44, 0x00, 0x00,
0x49, 0x83, 0xF8, 0x10, 0x72, 0x2A, 0x4D, 0x8D, 0x4C, 0x08, 0xF0, 0x49, 0x83, 0xE0, 0x20, 0x0F,
0x11, 0x01, 0x49, 0xD1, 0xE8, 0x41, 0x0F, 0x11, 0x01, 0x42, 0x0F, 0x11, 0x04, 0x01, 0x49, 0xF7,
0xD8, 0x43, 0x0F, 0x11, 0x04, 0x01, 0xC3, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x49, 0x83, 0xF8, 0x04, 0x72, 0x2A, 0x4D, 0x8D, 0x4C, 0x08, 0xFC, 0x49, 0x83, 0xE0, 0x08, 0x89,
0x11, 0x49, 0xD1, 0xE8, 0x41, 0x89, 0x11, 0x42, 0x89, 0x14, 0x01, 0x49, 0xF7, 0xD8, 0x43, 0x89,
0x14, 0x01, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
0x4D, 0x85, 0xC0, 0x74, 0x11, 0x88, 0x11, 0x4E, 0x8D, 0x4C, 0x01, 0xFE, 0x49, 0x83, 0xF8, 0x01,
0x74, 0x04, 0x66, 0x41, 0x89, 0x11, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x57, 0xF6, 0x05, 0xB8, 0x11, 0x00, 0x00, 0x01, 0x74, 0x32, 0x48, 0x8B, 0xF9, 0x4C, 0x03, 0xC1,
0x0F, 0x11, 0x01, 0x48, 0x83, 0xC7, 0x40, 0x0F, 0x11, 0x41, 0x10, 0x48, 0x83, 0xE7, 0xC0, 0x0F,
0x11, 0x41, 0x20, 0x4C, 0x2B, 0xC7, 0x0F, 0x11, 0x41, 0x30, 0x49, 0x8B, 0xC8, 0x4C, 0x8B, 0xC8,
0x66, 0x48, 0x0F, 0x7E, 0xC0, 0xF3, 0xAA, 0x49, 0x8B, 0xC1, 0x5F, 0xC3, 0xE8, 0x3F, 0x00, 0x00,
0x00, 0xEB, 0xC7, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x50, 0x48, 0x83, 0xEC, 0x30, 0x0F, 0x29, 0x44, 0x24, 0x20,
0xE8, 0x9B, 0xFA, 0xFF, 0xFF, 0x0F, 0x28, 0x44, 0x24, 0x20, 0x48, 0x83, 0xC4, 0x30, 0x58, 0x59,
0x5A, 0x41, 0x58, 0x41, 0x59, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xB8, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xE4, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0A, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x34, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x5E, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x8C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xAE, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xD6, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20, 0x4D, 0x6F, 0x64, 0x75,
0x6C, 0x65, 0x20, 0x4E, 0x61, 0x6D, 0x65, 0x3A, 0x20, 0x25, 0x77, 0x5A, 0x0A, 0x00, 0x00, 0x00,
0x5B, 0x3E, 0x5D, 0x20, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x20, 0x42, 0x61, 0x73, 0x65, 0x3A,
0x20, 0x25, 0x70, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20, 0x4D, 0x6F, 0x64, 0x75,
0x6C, 0x65, 0x20, 0x53, 0x69, 0x7A, 0x65, 0x3A, 0x20, 0x25, 0x64, 0x0A, 0x00, 0x00, 0x00, 0x00,
0x63, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x64, 0x00,
0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x69, 0x00,
0x6E, 0x00, 0x65, 0x00, 0x32, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00,
0x69, 0x00, 0x6E, 0x00, 0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00,
0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00,
0x5C, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00,
0x41, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x44, 0x00,
0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x5C, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00,
0x63, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x53, 0x00,
0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00,
0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20, 0x5B, 0x41, 0x69, 0x6D,
0x53, 0x74, 0x61, 0x72, 0x5D, 0x20, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x20, 0x4C, 0x4F, 0x41,
0x44, 0x45, 0x44, 0x20, 0x53, 0x55, 0x43, 0x43, 0x45, 0x46, 0x55, 0x4C, 0x4C, 0x59, 0x00, 0x00,
0x5C, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x5C, 0x00,
0x41, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x44, 0x00,
0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x8D, 0xB8, 0x6C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00,
0x50, 0x22, 0x00, 0x00, 0x50, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0xB8, 0x6C, 0x66,
0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xA0, 0x22, 0x00, 0x00,
0xA0, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0xB8, 0x6C, 0x66, 0x00, 0x00, 0x00, 0x00,
0x0D, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0xB4, 0x22, 0x00, 0x00, 0xB4, 0x16, 0x00, 0x00,
0x18, 0x00, 0x00, 0x00, 0x02, 0x80, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x48, 0x22, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x09, 0x00, 0x00,
0x52, 0x53, 0x44, 0x53, 0x16, 0xDD, 0xFF, 0xC8, 0x2C, 0x1A, 0x40, 0x42, 0xBB, 0xFC, 0x01, 0x38,
0x17, 0x7C, 0x4C, 0xA3, 0x01, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x68, 0x65, 0x6C, 0x6C, 0x6F,
0x77, 0x6F, 0x72, 0x6C, 0x64, 0x5C, 0x6D, 0x33, 0x33, 0x35, 0x31, 0x61, 0x6E, 0x5C, 0x41, 0x69,
0x6D, 0x53, 0x74, 0x61, 0x72, 0x5C, 0x78, 0x36, 0x34, 0x5C, 0x52, 0x65, 0x6C, 0x65, 0x61, 0x73,
0x65, 0x5C, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x47, 0x43, 0x54, 0x4C, 0x00, 0x10, 0x00, 0x00, 0x40, 0x0A, 0x00, 0x00,
0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1A, 0x00, 0x00,
0xC0, 0x04, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x24, 0x32, 0x31, 0x00,
0x00, 0x20, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35,
0x00, 0x00, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61,
0x74, 0x61, 0x00, 0x00, 0x30, 0x22, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61,
0x74, 0x61, 0x24, 0x76, 0x6F, 0x6C, 0x74, 0x6D, 0x64, 0x00, 0x00, 0x00, 0x50, 0x22, 0x00, 0x00,
0xA0, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A, 0x7A, 0x7A, 0x64, 0x62,
0x67, 0x00, 0x00, 0x00, 0xF0, 0x23, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61,
0x74, 0x61, 0x00, 0x00, 0x08, 0x25, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,
0x74, 0x61, 0x24, 0x32, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x25, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33, 0x00, 0x00, 0x00, 0x00, 0x30, 0x25, 0x00, 0x00,
0x88, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00,
0xB8, 0x25, 0x00, 0x00, 0x5E, 0x01, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x36,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74,
0x61, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x62, 0x73, 0x73,
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00, 0x2E, 0x70, 0x64, 0x61,
0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xA0, 0x08, 0x00, 0xA0, 0x54, 0x09, 0x00, 0x12, 0x92, 0x0E, 0xF0, 0x0C, 0xE0, 0x0A, 0x70,
0x09, 0x60, 0x08, 0x30, 0x01, 0x0F, 0x06, 0x00, 0x0F, 0x54, 0x10, 0x00, 0x0F, 0x34, 0x0F, 0x00,
0x0F, 0xB2, 0x0B, 0x60, 0x21, 0x05, 0x02, 0x00, 0x05, 0x74, 0x0E, 0x00, 0x30, 0x12, 0x00, 0x00,
0x6B, 0x12, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00, 0x74, 0x0E, 0x00,
0x30, 0x12, 0x00, 0x00, 0x6B, 0x12, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x01, 0x5C, 0x0E, 0x00,
0x5C, 0xF4, 0x28, 0x00, 0x54, 0xE4, 0x29, 0x00, 0x4C, 0xC4, 0x2A, 0x00, 0x41, 0x74, 0x30, 0x00,
0x31, 0x54, 0x2F, 0x00, 0x0A, 0x01, 0x2B, 0x00, 0x03, 0x60, 0x02, 0x30, 0x01, 0x10, 0x05, 0x00,
0x10, 0x01, 0x30, 0x00, 0x04, 0x70, 0x03, 0x30, 0x02, 0x50, 0x00, 0x00, 0x21, 0x28, 0x08, 0x00,
0x28, 0xF4, 0x2E, 0x00, 0x20, 0xE4, 0x2F, 0x00, 0x14, 0xC4, 0x37, 0x00, 0x08, 0x64, 0x36, 0x00,
0xF0, 0x14, 0x00, 0x00, 0x66, 0x16, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00, 0x21, 0x00, 0x08, 0x00,
0x00, 0xF4, 0x2E, 0x00, 0x00, 0xE4, 0x2F, 0x00, 0x00, 0xC4, 0x37, 0x00, 0x00, 0x64, 0x36, 0x00,
0xF0, 0x14, 0x00, 0x00, 0x66, 0x16, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00,
0x04, 0x42, 0x00, 0x00, 0x01, 0x0A, 0x04, 0x00, 0x0A, 0x34, 0x06, 0x00, 0x0A, 0x32, 0x06, 0x70,
0x01, 0x06, 0x02, 0x00, 0x06, 0xB2, 0x02, 0x30, 0x01, 0x04, 0x01, 0x00, 0x04, 0x62, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x00, 0x02, 0x06, 0x09, 0x06,
0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0B, 0x08, 0x00, 0x08, 0x16, 0x00, 0x06,
0x0B, 0x52, 0x07, 0x00, 0x06, 0x10, 0x05, 0x20, 0x04, 0x80, 0x02, 0x90, 0x02, 0x06, 0x04, 0x00,
0x02, 0x06, 0x03, 0x06, 0x06, 0x12, 0x02, 0x30, 0x30, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x08, 0x27, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xB8, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xE4, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0A, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x34, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x5E, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x8C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xAE, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xD6, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x08, 0x52, 0x74, 0x6C, 0x43, 0x6F, 0x6D,
0x70, 0x61, 0x72, 0x65, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E,
0x67, 0x00, 0x74, 0x07, 0x50, 0x73, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,
0x50, 0x65, 0x62, 0x00, 0x71, 0x00, 0x44, 0x62, 0x67, 0x50, 0x72, 0x69, 0x6E, 0x74, 0x45, 0x78,
0x00, 0x00, 0xCB, 0x06, 0x4F, 0x62, 0x66, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6E,
0x63, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00, 0x00, 0xF1, 0x08, 0x52, 0x74, 0x6C, 0x49,
0x6E, 0x69, 0x74, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67,
0x00, 0x00, 0x1E, 0x06, 0x4D, 0x6D, 0x55, 0x6E, 0x6D, 0x61, 0x70, 0x49, 0x6F, 0x53, 0x70, 0x61,
0x63, 0x65, 0x00, 0x00, 0x26, 0x03, 0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72,
0x69, 0x76, 0x65, 0x72, 0x00, 0x00, 0x70, 0x05, 0x4B, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x41,
0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x00, 0xB0, 0x07,
0x50, 0x73, 0x4C, 0x6F, 0x6F, 0x6B, 0x75, 0x70, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x42,
0x79, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x00, 0x00, 0xC1, 0x05, 0x4D, 0x6D,
0x43, 0x6F, 0x70, 0x79, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00, 0x00, 0xDF, 0x08, 0x52, 0x74,
0x6C, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0xEF, 0x05, 0x4D, 0x6D,
0x4D, 0x61, 0x70, 0x49, 0x6F, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x00, 0x00, 0x23, 0x03,
0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x00, 0x00,
0x4F, 0x04, 0x49, 0x6F, 0x66, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
0x75, 0x65, 0x73, 0x74, 0x00, 0x00, 0x2F, 0x03, 0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x69, 0x63, 0x4C, 0x69, 0x6E, 0x6B, 0x00, 0x00, 0x80, 0x05,
0x4B, 0x65, 0x55, 0x6E, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x50,
0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x00, 0x6E, 0x74, 0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C,
0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x10, 0x00, 0x00, 0x26, 0x12, 0x00, 0x00, 0xF0, 0x23, 0x00, 0x00, 0x30, 0x12, 0x00, 0x00,
0x6B, 0x12, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x6B, 0x12, 0x00, 0x00, 0x1A, 0x13, 0x00, 0x00,
0x14, 0x24, 0x00, 0x00, 0x1A, 0x13, 0x00, 0x00, 0x2E, 0x13, 0x00, 0x00, 0x28, 0x24, 0x00, 0x00,
0x30, 0x13, 0x00, 0x00, 0xE7, 0x14, 0x00, 0x00, 0x3C, 0x24, 0x00, 0x00, 0xF0, 0x14, 0x00, 0x00,
0x66, 0x16, 0x00, 0x00, 0x5C, 0x24, 0x00, 0x00, 0x66, 0x16, 0x00, 0x00, 0xBC, 0x17, 0x00, 0x00,
0x6C, 0x24, 0x00, 0x00, 0xBC, 0x17, 0x00, 0x00, 0xBE, 0x17, 0x00, 0x00, 0x8C, 0x24, 0x00, 0x00,
0xC0, 0x17, 0x00, 0x00, 0xE2, 0x17, 0x00, 0x00, 0xAC, 0x24, 0x00, 0x00, 0xF0, 0x17, 0x00, 0x00,
0x5B, 0x18, 0x00, 0x00, 0xB4, 0x24, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x31, 0x19, 0x00, 0x00,
0xC0, 0x24, 0x00, 0x00, 0x40, 0x19, 0x00, 0x00, 0x6D, 0x19, 0x00, 0x00, 0xC8, 0x24, 0x00, 0x00,
0x70, 0x19, 0x00, 0x00, 0x0C, 0x1A, 0x00, 0x00, 0xFC, 0x24, 0x00, 0x00, 0x40, 0x1A, 0x00, 0x00,
0xEA, 0x1C, 0x00, 0x00, 0xD0, 0x24, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x07, 0x1E, 0x00, 0x00,
0xD0, 0x24, 0x00, 0x00, 0x40, 0x1E, 0x00, 0x00, 0x83, 0x1E, 0x00, 0x00, 0xD8, 0x24, 0x00, 0x00,
0xC0, 0x1E, 0x00, 0x00, 0xE6, 0x1E, 0x00, 0x00, 0xE8, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
size_t arraySize = sizeof(Driver) / sizeof(Driver[0]);

void createDriver() {

	std::ofstream outFile("ASDriver.sys", std::ios::binary);
	if (!outFile) {
		std::cerr << "Create failed" << std::endl;
		return;
	}

	outFile.write(reinterpret_cast<const char*>(Driver), arraySize);
	if (!outFile) {
		std::cerr << "Write failed" << std::endl;
		return;
	}

	outFile.close();
	std::cout << "Write success" << std::endl;
	return;
}

HANDLE iqvw64e_device_handle;


LONG WINAPI SimplestCrashHandler(EXCEPTION_POINTERS* ExceptionInfo)
{
	if (ExceptionInfo && ExceptionInfo->ExceptionRecord)
		Log(L"[!!] Crash at addr 0x" << ExceptionInfo->ExceptionRecord->ExceptionAddress << L" by 0x" << std::hex << ExceptionInfo->ExceptionRecord->ExceptionCode << std::endl);
	else
		Log(L"[!!] Crash" << std::endl);

	if (iqvw64e_device_handle)
		intel_driver::Unload(iqvw64e_device_handle);

	return EXCEPTION_EXECUTE_HANDLER;
}

bool callbackEx(ULONG64* param1, ULONG64* param2, ULONG64 allocationPtr, ULONG64 allocationSize, ULONG64 mdlptr) {
	UNREFERENCED_PARAMETER(param1);
	UNREFERENCED_PARAMETER(param2);
	UNREFERENCED_PARAMETER(allocationPtr);
	UNREFERENCED_PARAMETER(allocationSize);
	UNREFERENCED_PARAMETER(mdlptr);
	Log("[+] Callbacked" << std::endl);

	/*
	This callback occurs before call driver entry and
	can be usefull to pass more customized params in
	the last step of the mapping procedure since you
	know now the mapping address and other things
	*/
	return true;
}

int kdmap(const int argc, wchar_t** argv) {
	SetUnhandledExceptionFilter(SimplestCrashHandler);

	bool free = false;
	bool mdlMode = false;
	bool indPagesMode = false;
	bool passAllocationPtr = false;

	if (free) {
		Log(L"[+] Free pool memory after usage enabled" << std::endl);
	}

	if (mdlMode) {
		Log(L"[+] Mdl memory usage enabled" << std::endl);
	}

	if (indPagesMode) {
		Log(L"[+] Allocate Independent Pages mode enabled" << std::endl);
	}

	if (passAllocationPtr) {
		Log(L"[+] Pass Allocation Ptr as first param enabled" << std::endl);
	}


	const std::wstring driver_path = L"ASDriver.sys";//argv[drvIndex];


	iqvw64e_device_handle = intel_driver::Load();

	if (iqvw64e_device_handle == INVALID_HANDLE_VALUE) {
		return -1;
	}

	std::vector<uint8_t> raw_image = { 0 };
	if (!utils::ReadFileToMemory(driver_path, &raw_image)) {
		Log(L"[-] Failed to read image to memory" << std::endl);
		intel_driver::Unload(iqvw64e_device_handle);
		return -1;
	}

	kdmapper::AllocationMode mode = kdmapper::AllocationMode::AllocatePool;

	if (mdlMode && indPagesMode) {
		Log(L"[-] Too many allocation modes" << std::endl);
		intel_driver::Unload(iqvw64e_device_handle);
		return -1;
	}
	else if (mdlMode) {
		mode = kdmapper::AllocationMode::AllocateMdl;
	}
	else if (indPagesMode) {
		mode = kdmapper::AllocationMode::AllocateIndependentPages;
	}

	NTSTATUS exitCode = 0;
	if (!kdmapper::MapDriver(iqvw64e_device_handle, raw_image.data(), 0, 0, free, true, mode, passAllocationPtr, callbackEx, &exitCode)) {
		Log(L"[-] Failed to map " << driver_path << std::endl);
		intel_driver::Unload(iqvw64e_device_handle);
		return -1;
	}

	if (!intel_driver::Unload(iqvw64e_device_handle)) {
		Log(L"[-] Warning failed to fully unload vulnerable driver " << std::endl);
	}
	Log(L"[+] success" << std::endl);
}

#endif
//using json = nlohmann::json;


static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
	((std::string*)userp)->append((char*)contents, size * nmemb);
	return size * nmemb;
}



bool checkHWIDFromYAML(const std::string& hwid) {
	std::ifstream fileStream(MenuConfig::path + XorStr("\\Offsets\\offsets.yaml"));
	YAML::Node data = YAML::Load(fileStream);
	fileStream.close();

	if (!data["client.dll"]["VACManager_001"]) {
		return false;
	}

	for (const auto& item : data["client.dll"]["VACManager_001"]) {
		if (item.as<std::string>() == hwid) {
			return true;
		}
	}

	return false;
}

void UpdateLang()
{

	std::string langPath = MenuConfig::path + XorStr("\\Languages\\lang.yaml");

	if (!std::filesystem::exists(langPath)) {
		English();
		return;
	}
	std::ifstream langStream(langPath);
	YAML::Node langs = YAML::Load(langStream);
	langStream.close();

	//const_cast<char*>(langs["node"].as<std::string>().c_str());
	return;
}


void Cheat()
{

	if (Init::Verify::CheckWindowVersion())
	{
		Lang::GetCountry(MenuConfig::Country);
		MenuConfig::MaxFrameRate = Init::Client::getMaxFrameRate();
	}
		
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);	//Gets a standard output device handle  
	SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);	//Set the text color to green  
	srand((unsigned)time(NULL));
	RandomTitle();
	cout << R"(                                                                   
    ___    _          _____ __            
   /   |  (_)___ ___ / ___// /_____ ______
  / /| | / / __ `__ \\__ \/ __/ __ `/ ___/
 / ___ |/ / / / / / /__/ / /_/ /_/ / /    
/_/  |_/_/_/ /_/ /_/____/\__/\__,_/_/    
	)" << endl;
#ifdef USERMODE

	cout << XorStr("[WARN] You are using usermode version, you may have higher possibility to get banned as VAC detected.") << endl;
#else
	createDriver();
	kdmap(1, nullptr);
	std::remove("ASDriver.sys");
#endif // USERMODE
	printf(XorStr("Build-%s-%s\n"), __DATE__, __TIME__);
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);

	auto ProcessStatus = ProcessMgr.Attach(XorStr("cs2.exe"));

	char documentsPath[MAX_PATH];
	if (SHGetFolderPathA(NULL, CSIDL_PERSONAL, NULL, 0, documentsPath) != S_OK) {
		cerr << XorStr("[Info] Error: Failed to get the Documents folder path.") << endl;
		Exit();
	}
	MenuConfig::path = documentsPath;
	MenuConfig::path += XorStr("\\AimStar");
	MenuConfig::HWID = Init::Client::GenerateHWID();
	printf("%s\n",MenuConfig::HWID.substr(MenuConfig::HWID.length() - 16).c_str());
	if (checkHWIDFromYAML(MenuConfig::HWID.substr(MenuConfig::HWID.length() - 16).c_str()))
		MenuConfig::DRM = true;
	switch (ProcessStatus) {
	case 1:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("[ERROR] Please launch the game first!") << endl;
		Exit();
	case 2:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("[ERROR] Failed to hook process, please run the cheat as Administrator (Right click AimStar > Run as Adminstrator).") << endl;
		Exit();
	case 3:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("[ERROR] Failed to get module address.") << endl;
		Exit();
	default:
		break;
	}

	if (!Offset::UpdateOffsets())
	{
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("[ERROR] Failed to update offsets.") << endl;
		Exit();
	}

	if (!gGame.InitAddress())
	{
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << XorStr("[ERROR] Failed to call InitAddress(). If you are using kernel mode, please check whether the driver is mapped") << endl;
		Exit();
	}

	cout << XorStr("[Game] Process ID: ") << ProcessMgr.ProcessID << endl;
	cout << XorStr("[Game] Client Address: ") << gGame.GetClientDLLAddress() << endl;

	if (fs::exists(MenuConfig::path))
	{
		cout << XorStr("[Info] Config folder connected: ") << MenuConfig::path << endl;
	}
	else
	{
		if (fs::create_directories(MenuConfig::path))
		{
			cout << XorStr("[Info] Config folder created: ") << MenuConfig::path << endl;
		}
		else
		{
			cerr << XorStr("[Info] Error: Failed to create the config directory.") << endl;
			Exit();
		}
	}

	ifstream defaultConfig(MenuConfig::path + XorStr("\\default.yml"));
	if (defaultConfig.is_open())
	{
		MenuConfig::defaultConfig = true;
		defaultConfig.close();		
	}
	// Language initialize
	UpdateLang();
	cout << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN);
	cout << XorStr("Cheat running successfully!") << endl;
	cout << XorStr("Press [INS] or [DEL] to show or hide Menu.") << endl;
	cout << XorStr("Have fun...") << endl << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED);
	cout << XorStr("=======[ Offset List ]=======") << endl;
	cout << setw(23) << left << XorStr("EntityList:") << setiosflags(ios::uppercase) << hex << Offset::EntityList << endl;
	cout << setw(23) << left << XorStr("Matrix:") << setiosflags(ios::uppercase) << hex << Offset::Matrix << endl;
	cout << setw(23) << left << XorStr("LocalPlayerController:") << setiosflags(ios::uppercase) << hex << Offset::LocalPlayerController << endl;
	cout << setw(23) << left << XorStr("ViewAngles:") << setiosflags(ios::uppercase) << hex << Offset::ViewAngle << endl;
	cout << setw(23) << left << XorStr("LocalPlayerPawn:") << setiosflags(ios::uppercase) << hex << Offset::LocalPlayerPawn << endl;
	cout << setw(23) << left << XorStr("PlantedC4:") << setiosflags(ios::uppercase) << hex << Offset::PlantedC4 << endl;
	cout << setw(23) << left << XorStr("ForceJump:") << setiosflags(ios::uppercase) << hex << Offset::ForceJump << endl;
	cout << setw(23) << left << XorStr("Sensitivity:") << setiosflags(ios::uppercase) << hex << Offset::Sensitivity << endl;
	// cout << setw(23) << left << XorStr("ForceCrouch:") << setiosflags(ios::uppercase) << hex << Offset::ForceCrouch << endl;
	// cout << setw(23) << left << XorStr("ForceForward:") << setiosflags(ios::uppercase) << hex << Offset::ForceForward << endl;
	// cout << setw(23) << left << XorStr("ForceLeft:") << setiosflags(ios::uppercase) << hex << Offset::ForceLeft << endl;
	// cout << setw(23) << left << XorStr("ForceRight:") << setiosflags(ios::uppercase) << hex << Offset::ForceRight << endl;
	// cout << setw(23) << left << XorStr("TestPointer:") << setiosflags(ios::uppercase) << hex << Offset::Pointer << endl;
	cout << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);

	try
	{
		Gui.AttachAnotherWindow(XorStr("Counter-Strike 2"), XorStr("SDL_app"), Cheats::Run);
	}
	catch (OSImGui::OSException& e)
	{
		try
		{
			// Perfect World version
			Gui.AttachAnotherWindow(XorStr("\u53cd\u6050\u7cbe\u82f1\uff1a\u5168\u7403\u653b\u52bf"), XorStr("SDL_app"), Cheats::Run);
		}
		catch (OSImGui::OSException& e)
		{
			cout << e.what() << endl;
		}
	}
}

int main(void)
{

	const char* tempPath = std::getenv("TMP");
	if (tempPath != nullptr)
	{
		fileName = std::string(tempPath) + XorStr("\\Aimstar");
		otp = Init::Verify::isVerified(fileName);
	}

	if (otp)
	{
		Cheat();
		return 0;
	}
	else
	{
		// OTP Window
		WNDCLASS wc = { 0 };
		const wchar_t CLASS_NAME[] = L"OTPInputClass";

		wc.lpfnWndProc = WndProc;
		wc.hInstance = GetModuleHandle(NULL);
		wc.lpszClassName = CLASS_NAME;

		RegisterClass(&wc);

		HWND hwnd = CreateWindowEx(
			0, CLASS_NAME, L"Verify", WS_OVERLAPPEDWINDOW,
			CW_USEDEFAULT, CW_USEDEFAULT, 400, 200,
			NULL, NULL, GetModuleHandle(NULL), NULL
		);

		if (hwnd == NULL) {
			return 0;
		}

		ShowWindow(hwnd, SW_SHOW);

		MSG msg;
		while (GetMessage(&msg, NULL, 0, 0)) {
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return 0;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {
	//bool showed = false;
	if (!otp /*&& !showed*/)
	{
		cout << XorStr("Please enter your OTP code! Get the OTP code from: https://aimstar.tkm.icu") << endl;
		//showed = true;
	}
	static int RetTimes = 0;

	switch (message) {
        case WM_CREATE:
	{
		CreateWindowW(L"STATIC", L"Please enter your OTP code:",
			WS_VISIBLE | WS_CHILD | SS_CENTER,
			50, 20, 300, 20, hwnd, NULL, NULL, NULL);
		CreateWindowW(L"EDIT", L"",
			WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL,
			100, 50, 200, 20, hwnd, (HMENU)2, NULL, NULL);
		CreateWindowW(L"BUTTON", L"Verify",
			WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
			215, 90, 70, 30, hwnd, (HMENU)1, NULL, NULL);
		CreateWindowW(L"BUTTON", L"Get OTP",
			WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
			115, 90, 70, 30, hwnd, (HMENU)3, NULL, NULL);
		break;
	}
	case WM_COMMAND:
	{
		if (LOWORD(wParam) == 1) {
			wchar_t buffer[10];
			GetWindowTextW(GetDlgItem(hwnd, 2), buffer, 10);
			wstring ws(buffer);
			string input(ws.begin(), ws.end());
			string time, code;
			Init::Verify::CodeGenerate(time, code);

			if (input != code) {
				RetTimes++;
				if (RetTimes < 3) {
					MessageBox(hwnd, L"OTP code error!!", L"Error", MB_OK | MB_ICONERROR);
				}
				else {
					MessageBox(hwnd, L"Exceeded maximum attempts.", L"Error", MB_OK | MB_ICONERROR);
					DestroyWindow(hwnd);
					Init::Client::QuitGame();
					Exit();
				}
			}
			else {
				otp = true;
				std::ofstream outfile(fileName);
				outfile.close();
				ShowWindow(hwnd, SW_HIDE);
				system("cls");
				Cheat();
			}
		}
		if (LOWORD(wParam) == 3)
		{
			ShellExecuteA(NULL, "open", XorStr("https://aimstar.tkm.icu"), NULL, NULL, SW_SHOWNORMAL);
			// ShellExecute(NULL, TEXT("open"), TEXT("https://aimstar.tkm.icu"), NULL, NULL, SW_SHOWNORMAL);
		}
		break;
	}
	case WM_DESTROY:
	{
		PostQuitMessage(0);
		break;
	}
	default:
		return DefWindowProc(hwnd, message, wParam, lParam);
	}
	return 0;
}
